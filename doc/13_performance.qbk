[section Performance]

The performance of ['Boost.Convert] entirely depends on the converter deployed. The mentioned convertors have been tested as part of the ['Boost.Convert] framework. Raw ['scanf()] and ['boost::lexical_cast] have also been tested but showed identical results (when tests are built optimized) to when they were deployed through the ['Boost.Convert] framework. Consequently, for brevity those raw ['scanf()] and ['boost::lexical_cast] results are not shown here. The C++11 family of ['std::to_string()], ['std::stoi()], etc. were not tested due to unavailablility.

Performance was tested for string conversions to the ['integer] type and a user-defined type. See the actual code in ['test/performance.cpp]. On a Ubuntu box (compiled with gcc 4.6.3) tests produced the following results:

 g++ -O3 test_convert.cpp
 str-to-int: strtol/scanf/lcast/sstream=0.28/1.15/0.45/1.70 seconds.
 int-to-str: ltostr/scanf/lcast/sstream=1.50/2.17/1.11/1.73 seconds.
 str-to-user-type: lcast/sstream=3.26/2.58 seconds.

 g++ -O0 test_convert.cpp
 str-to-int: strtol/scanf/lcast/sstream=0.49/1.40/1.56/2.00 seconds.
 int-to-str: ltostr/scanf/lcast/sstream=3.10/2.62/2.42/2.52 seconds.
 str-to-user-type: lcast/sstream=4.94/3.19 seconds.

On the Cygwin platform compiled with gcc 4.8.2:

 g++ -O3 test_convert.cpp
 str-to-int: strtol/scanf/lcast/sstream=0.28/1.20/1.22/2.42 seconds.
 int-to-str: strtol/scanf/lcast/sstream=1.31/2.94/2.62/2.03 seconds.
 str-to-user-type: lcast/sstream=7.44/4.61 seconds.
 
Compiled with MS Visual C++ 2010 Express optimized for speed:

 str-to-int: strtol/scanf/lcast/sstream=0.28/0.89/1.03/6.20 seconds.
 int-to-str: ltostr/scanf/lcast/sstream=1.11/1.86/1.91/5.92 seconds.
 str-to-user-type: lcast/sstream=6.81/3.30 seconds.

Non-optimized times are more of a curiosity -- to demonstrate (and to remind) that considerable performance is to be gained via optimized compilation. Optimized times are the ones to be looked at and analyzed. 

For user-defined types only two converters were tested -- ['boost::lexical_cast]-based and the ['std::stringstream]-based converter. Other conversion facilities did not provide that functionality.

Both converters provide ['string-to-type] and ['type-to-string] conversions. However, their priorities are quite different. For basic (['int], etc.) types ['boost::lexical_cast] performance has been optimized (see [link 5 \[5\]]). Therefore, if speed is your primary objective and your needs do not go beyond basic types, then deploying ['boost::lexical_cast] (directly or via the ['Boost.Convert] framework) might be an option to explore. However, for user-defined types it appears to be quite a different story with ['Boost.Convert] consistently outperforming ['boost::lexical_cast] in the tests.

These results probably reflect different underlying designs. The standard ['Boost.Convert] usage pattern is to create a converter or converters once and then re-use them (as in the code above). Consequently, performance-wise this deployment pattern is likely to represent the fourth (['std::stringstream without construction]) column of the [link 5 \[5\]] table. 

In turn, ['boost::lexical_cast] also deploys the standard ['stream] framework for user-defined types. However, due to its design ['boost::lexical_cast] creates and then destroys an instance of a stream type every time the function is called and, consequently, probably belongs with the third (['std::stringstream with construction]) and much slower column of the [link 5 \[5\]] table. 

Based on the performance data I tend to conclude that, given type-safety and benefits provided by the ['Boost.Convert] framework, it (with appropriate converters) should probably be the first choice for conversion-related tasks.
 
[endsect]
