[section Performance]

The performance of ['Boost.Convert] entirely depends on the converter deployed. The mentioned convertors have been tested as part of the ['Boost.Convert] framework. Raw ['scanf()] and ['boost::lexical_cast] have also been tested but showed identical results (when tests are built optimized) to when they were deployed through the ['Boost.Convert] framework. Consequently, for brevity those raw ['scanf()] and ['boost::lexical_cast] results are not shown here.

Performance was tested for string conversions to the ['integer] type and the user-defined ['direction] type (described later in the documentation). See the actual code in ['test/performance.cpp]. On a Ubuntu box (compiled with gcc 4.6.3) tests produced the following results:

 g++ -O3 test_convert.cpp
 str-to-int: strtol/scanf/lcast/sstream=0.28/1.15/0.45/1.70 seconds.
 int-to-str-to-int: scanf/lcast/sstream=3.39/1.55/3.14 seconds.
 str-to-user-type: lcast/sstream=3.26/2.58 seconds.

 g++ -O0 test_convert.cpp
 str-to-int: strtol/scanf/lcast/sstream=0.48/1.42/1.52/2.06 seconds.
 int-to-str-to-int: scanf/lcast/sstream=3.88/4.48/3.82 seconds.
 str-to-user-type: lcast/sstream=5.04/2.87 seconds.

On the Cygwin platform compiled with gcc 4.8.2 I tests produced the following results:

 g++ -O3 test_convert.cpp
 str-to-int: strtol/scanf/lcast/sstream=0.28/1.08/1.19/2.36 seconds.
 str-to-user-type: lcast/sstream=5.47/4.16 seconds.

That same code compiled with MS Visual C++ 2010 Express optimized for speed:

 string-to-int: strtol/scanf/lcast/sstream=0.28/0.81/0.86/5.66 seconds.
 string-to-user-type: lcast/sstream=6.30/2.97 seconds.
  
Non-optimized times are more of a curiosity -- to demonstrate (and to remind) that considerable performance is to be gained via optimized compilation. Optimized times are the ones to be looked at and analyzed. They show that for basic string-to-int conversions the ['strtol]-based converter comes well ahead of the rest. ['scanf]-based and ['lexical_cast]-based converters exchange their places depending on the platform. 

For user-defined types only two converters were tested -- ['boost::lexical_cast]-based and the ['std::stringstream]-based converter. Other conversion facilities did not provide that functionality.

Both converters provide ['string-to-type] and ['type-to-string] conversions. However, their priorities are quite different. For basic (['int], etc.) types ['boost::lexical_cast] performance has been optimized (see [link 5 \[5\]]). Therefore, if speed is your primary objective and your needs do not go beyond basic types, then deploying ['boost::lexical_cast] (directly or via the ['Boost.Convert] framework) might be an option to explore. However, for user-defined types it appears to be quite a different story with ['Boost.Convert] consistently outperforming ['boost::lexical_cast] in the tests.

These results probably reflect different underlying designs. The standard ['Boost.Convert] usage pattern is to create a converter or converters once and then re-use them (as in the code above). Consequently, performance-wise this deployment pattern is likely to represent the fourth (['std::stringstream without construction]) column of the [link 5 \[5\]] table. 

In turn, ['boost::lexical_cast] also deploys the standard ['stream] framework for user-defined types. However, due to its design ['boost::lexical_cast] creates and then destroys an instance of a stream type every time the function is called and, consequently, probably belongs with the third (['std::stringstream with construction]) and much slower column of the [link 5 \[5\]] table. 

Based on the performance data I tend to conclude that, given type-safety and benefits provided by the ['Boost.Convert] framework, it (with appropriate converters) should probably be the first choice for conversion-related tasks.
 
[endsect]
