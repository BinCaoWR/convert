<?xml version="1.0" standalone="yes"?>
<library-reference id="convert_reference"><title>Convert Reference</title><header name="boost/convert/api.hpp"><namespace name="boost"><struct name="convert"><template>
      <template-type-parameter name="TypeOut"/>
    </template><struct name="algorithm_helper"><template>
      <template-type-parameter name="TypeIn"/>
      <template-type-parameter name="Converter"/>
    </template><typedef name="this_type"><type><classname>algorithm_helper</classname></type></typedef><method-group name="public member functions"><method name="value_or" cv=""><type>with_fallback</type><template>
          <template-type-parameter name="FallbackType"/>
        </template><parameter name=""><paramtype>FallbackType const &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>TypeOut</type><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter></method></method-group><constructor><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></constructor></struct><struct-specialization name="algorithm_helper"><template>
      <template-type-parameter name="TypeIn"/>
      <template-type-parameter name="Converter"/>
    </template><specialization><template-arg>TypeIn</template-arg><template-arg>Converter</template-arg></specialization><typedef name="this_type"><type>with_fallback</type></typedef><typedef name="base_type"><type><classname>boost::convert</classname>&lt; TypeOut &gt;::<classname>algorithm_helper</classname>&lt; TypeIn, Converter &gt;</type></typedef><data-member name="fallback_"><type>out_type</type></data-member><method-group name="public member functions"><method name="with_fallback" cv=""><type/><parameter name="ah"><paramtype><classname>base_type</classname> const &amp;</paramtype></parameter><parameter name="fallback"><paramtype>TypeOut const &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>TypeOut</type><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter></method></method-group></struct-specialization><struct name="result"><typedef name="this_type"><type><classname>result</classname></type></typedef><typedef name="safebool"><type>boost::safebool&lt; <classname>result</classname> &gt;</type></typedef><method-group name="public member functions"><method name="operator!" cv="const"><type>bool</type></method><method name="conversion-operator" cv="const"><type>typename safebool::type</type></method><method name="value" cv="const"><type>out_type const &amp;</type></method><method name="value_or" cv="const"><type>out_type</type><template>
          <template-type-parameter name="FallbackType"/>
        </template><parameter name="fallback"><paramtype>FallbackType const &amp;</paramtype></parameter></method></method-group><constructor><parameter name="v"><paramtype>out_type const &amp;</paramtype></parameter></constructor><method-group name="private member functions"><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><parameter name="good"><paramtype>bool</paramtype></parameter></method></method-group></struct><typedef name="this_type"><type><classname>boost::convert</classname>&lt; TypeOut &gt;</type></typedef><typedef name="out_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="result_type"><type><classname>boost::convert</classname>&lt; out_type &gt;::<classname>result</classname></type></typedef><method-group name="public static functions"><method name="create_storage" cv=""><type>static out_type</type></method><method name="from" cv=""><type>static <classname>result_type</classname></type><template>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter></method><method name="from" cv=""><type>static <classname>algorithm_helper</classname>&lt; TypeIn, Converter &gt;</type><template>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></method></method-group></struct><function name="cnv"><type><classname>convert</classname>&lt; TypeOut &gt;::result_type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter></function><function name="cnv"><type><classname>boost::convert</classname>&lt; TypeOut &gt;::template algorithm_helper&lt; TypeIn, Converter &gt;</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></function></namespace></header><header name="boost/convert/parameters.hpp"><namespace name="boost"><namespace name="conversion"><struct name="base"><enum name="type"><enumvalue name="dec"><default>10</default></enumvalue><enumvalue name="hex"><default>16</default></enumvalue><enumvalue name="oct"><default>8</default></enumvalue></enum></struct><struct name="notation"><enum name="type"><enumvalue name="fixed"/><enumvalue name="scientific"/></enum></struct><namespace name="parameter"><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype><classname>base</classname></paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>locale</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>precision</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>uppercase</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype><classname>notation</classname></paramtype></parameter></function></namespace></namespace></namespace></header></library-reference>
