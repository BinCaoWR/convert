<?xml version="1.0" standalone="yes"?>
<library-reference id="convert_reference"><title>Convert Reference</title><header name="boost/convert/lexical_cast.hpp"><namespace name="boost"><namespace name="cnv"><struct name="lexical_cast"><method-group name="public member functions"><method name="operator()" cv="const"><type>bool</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; TypeOut &gt; &amp;</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/convert/parameters.hpp"><namespace name="boost"><namespace name="cnv"><struct name="base"><enum name="type"><enumvalue name="dec"><default>10</default></enumvalue><enumvalue name="hex"><default>16</default></enumvalue><enumvalue name="oct"><default>8</default></enumvalue></enum></struct><struct name="notation"><enum name="type"><enumvalue name="fixed"/><enumvalue name="scientific"/></enum></struct><namespace name="parameter"><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype><classname>base</classname></paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>locale</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>precision</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>uppercase</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype><classname>notation</classname></paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/convert/printf.hpp"><namespace name="boost"><namespace name="cnv"><struct name="printf"><typedef name="this_type"><type><classname>boost::cnv::printf</classname></type></typedef><typedef name="base_type"><type><emphasis>unspecified</emphasis></type></typedef><data-member name="CONVERT_FUNC_SET_BASE"><type/></data-member><data-member name="CONVERT_FUNC_SET_PRECISION"><type/></data-member><data-member name="CONVERT_FUNC_SET_UPPERCASE"><type/></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>boost::disable_if&lt; cnv::is_any_string&lt; TypeIn &gt;, bool &gt;::type</type><template>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; std::string &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>boost::disable_if&lt; cnv::is_any_string&lt; TypeOut &gt;, bool &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
        </template><parameter name="value_in"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; TypeOut &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>boost::disable_if&lt; cnv::is_any_string&lt; TypeOut &gt;, bool &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
        </template><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; TypeOut &gt; &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="pos" cv="const"><type>int</type><template>
          <template-type-parameter name="Type"/>
        </template></method><method name="format" cv="const"><type>char const *</type><parameter name="pos"><paramtype>int</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/convert/result.hpp"><namespace name="boost"><namespace name="cnv"><struct name="optional"><template>
      <template-type-parameter name="TypeOut"/>
    </template><typedef name="this_type"><type><classname>optional</classname></type></typedef><typedef name="safebool"><type>boost::safebool&lt; <classname>this_type</classname> &gt;</type></typedef><method-group name="public member functions"><method name="operator!" cv="const"><type>bool</type></method><method name="conversion-operator" cv="const"><type>typename safebool::type</type></method><method name="operator*" cv=""><type>TypeOut &amp;</type></method><method name="operator-&gt;" cv=""><type>TypeOut *</type></method><method name="value" cv="const"><type>TypeOut const &amp;</type></method><method name="value_or" cv="const"><type>TypeOut</type><template>
          <template-type-parameter name="FallbackType"/>
        </template><parameter name="fallback"><paramtype>FallbackType const &amp;</paramtype></parameter></method></method-group><constructor/><copy-assignment cv=""><template>
          <template-type-parameter name="OtherTypeOut"/>
        </template><parameter name="v"><paramtype>OtherTypeOut const &amp;</paramtype></parameter></copy-assignment></struct></namespace></namespace><macro name="USE_MINE"/></header><header name="boost/convert/spirit.hpp"><namespace name="boost"><namespace name="cnv"><struct name="spirit"><method-group name="public member functions"><method name="operator()" cv="const"><type>bool</type><parameter name="str"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="result"><paramtype><classname>boost::cnv::optional</classname>&lt; int &gt; &amp;</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/convert/sstream.hpp"><namespace name="boost"><namespace name="cnv"><struct name="basic_stringstream"><template>
      <template-type-parameter name="Char"/>
    </template><typedef name="char_type"><type>Char</type></typedef><typedef name="this_type"><type><classname>boost::cnv::basic_stringstream</classname>&lt; char_type &gt;</type></typedef><typedef name="stream_type"><type>std::basic_stringstream&lt; char_type &gt;</type></typedef><typedef name="istream_type"><type>std::basic_istream&lt; char_type &gt;</type></typedef><typedef name="buffer_type"><type>std::basic_streambuf&lt; char_type &gt;</type></typedef><typedef name="parser_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="string_type"><type>std::basic_string&lt; char_type &gt;</type></typedef><typedef name="manipulator_type"><type>std::ios_base &amp;(*</type></typedef><method-group name="public member functions"><method name="operator()" cv="const"><type>boost::enable_if_c&lt;!cnv::is_any_string&lt; TypeIn &gt;::value, bool &gt;::type</type><template>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="string_out"><paramtype><classname>boost::cnv::optional</classname>&lt; string_type &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>boost::enable_if_c&lt; cnv::is_any_string&lt; StringIn &gt;::value &amp;&amp;!cnv::is_any_string&lt; TypeOut &gt;::value, bool &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="StringIn"/>
        </template><parameter name="string_in"><paramtype>StringIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; TypeOut &gt; &amp;</paramtype></parameter></method><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><parameter name="locale"><paramtype>std::locale const &amp;</paramtype></parameter></method><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><parameter name="m"><paramtype>manipulator_type</paramtype></parameter></method><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><template>
          <template-type-parameter name="Manipulator"/>
        </template><parameter name="m"><paramtype>Manipulator</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype>locale</paramtype></parameter><parameter name=""><paramtype>std::locale</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype>precision</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype>uppercase</paramtype></parameter><parameter name=""><paramtype>bool</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype><classname>base</classname></paramtype></parameter><parameter name=""><paramtype>boost::cnv::base::type</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype><classname>notation</classname></paramtype></parameter><parameter name=""><paramtype>boost::cnv::notation::type</paramtype></parameter></method></method-group><constructor/></struct><typedef name="cstringstream"><type><classname>boost::cnv::basic_stringstream</classname>&lt; char &gt;</type></typedef><typedef name="wstringstream"><type><classname>boost::cnv::basic_stringstream</classname>&lt; wchar_t &gt;</type></typedef></namespace></namespace></header><header name="boost/convert/strtol.hpp"><namespace name="boost"><namespace name="cnv"><struct name="strtol"><typedef name="this_type"><type><classname>boost::cnv::strtol</classname></type></typedef><typedef name="base_type"><type><emphasis>unspecified</emphasis></type></typedef><data-member name="CONVERT_FUNC_SET_BASE"><type/></data-member><data-member name="CONVERT_FUNC_SET_PRECISION"><type/></data-member><data-member name="CONVERT_FUNC_SET_UPPERCASE"><type/></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>bool</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype><classname>boost::cnv::optional</classname>&lt; int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype><classname>boost::cnv::optional</classname>&lt; long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype><classname>boost::cnv::optional</classname>&lt; unsigned long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype><classname>boost::cnv::optional</classname>&lt; double &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; double &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; unsigned long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>bool</type><parameter name="value_in"><paramtype>int</paramtype></parameter><parameter name="result_out"><paramtype><classname>boost::cnv::optional</classname>&lt; std::string &gt; &amp;</paramtype></parameter></method></method-group><method-group name="public static functions"><method name="ltostr" cv=""><type>static std::string</type><parameter name="num"><paramtype>long int</paramtype></parameter><parameter name="base"><paramtype>unsigned int</paramtype></parameter></method></method-group></struct></namespace></namespace></header></library-reference>
