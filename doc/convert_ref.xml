<?xml version="1.0" standalone="yes"?>
<library-reference id="convert_reference"><title>Convert Reference</title><header name="boost/convert.hpp"><namespace name="boost"><struct name="throw_on_failure_type"><enum name="type"/></struct><namespace name="cnv"><struct name="adapter"><template>
      <template-type-parameter name="TypeOut"/>
      <template-type-parameter name="TypeIn"/>
      <template-type-parameter name="Converter"/>
    </template><typedef name="this_type"><type><classname>adapter</classname></type></typedef><method-group name="public member functions"><method name="value_or" cv=""><type><classname>this_type</classname> &amp;</type><parameter name="fallback"><paramtype>TypeOut const &amp;</paramtype></parameter></method><method name="operator()" cv=""><type>TypeOut</type><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter></method></method-group><constructor><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter></constructor></struct></namespace><data-member name="throw_on_failure"><type>throw_on_failure_type::type const</type></data-member><function name="convert"><type>boost::enable_if&lt; cnv::is_cnv&lt; Converter, TypeIn, TypeOut &gt;, boost::optional&lt; TypeOut &gt; &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><purpose>The main Boost.Convert deployment interface. </purpose><description><para>This is the Boost.Convert main interface. For example, <programlisting>    <classname alt="boost::cnv::basic_stringstream">boost::cnv::cstringstream</classname> cnv;

    int    i1 = boost::convert&lt;int&gt;(" 12", cnv(std::skipws)).value();
    int    i2 = boost::convert&lt;int&gt;("uhm", cnv).value_or(-1);
    string s1 = boost::convert&lt;string&gt;(123.456, cnv)).value();
    string s2 = boost::convert&lt;string&gt;(123.456, cnv)).value_or("failed");
</programlisting> </para></description></function><function name="convert"><type>boost::enable_if&lt; cnv::is_cnv&lt; Converter, TypeIn, TypeOut &gt;, TypeOut &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><parameter name=""><paramtype>throw_on_failure_type::type</paramtype></parameter></function><function name="convert"><type>boost::enable_if_c&lt; cnv::is_cnv&lt; Converter, TypeIn, TypeOut &gt;::value &amp;&amp;boost::is_convertible&lt; FallbackValue, TypeOut &gt;::value, TypeOut &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
          <template-type-parameter name="FallbackValue"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><parameter name="fallback"><paramtype>FallbackValue const &amp;</paramtype></parameter></function><function name="convert"><type>boost::enable_if_c&lt; cnv::is_cnv&lt; Converter, TypeIn, TypeOut &gt;::value &amp;&amp;cnv::is_fun&lt; FallbackFunc, TypeOut &gt;::value, TypeOut &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
          <template-type-parameter name="FallbackFunc"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="converter"><paramtype>Converter const &amp;</paramtype></parameter><parameter name="fallback"><paramtype>FallbackFunc</paramtype></parameter></function><function name="convert"><type>boost::enable_if&lt; cnv::is_cnv&lt; Converter, TypeIn, TypeOut &gt;, typename <classname>boost::cnv::adapter</classname>&lt; TypeOut, TypeIn, Converter &gt; &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
          <template-type-parameter name="Converter"/>
        </template><parameter name="cnv"><paramtype>Converter const &amp;</paramtype></parameter><purpose>The main Boost.Convert deployment interface with algorithms. </purpose><description><para>This the Boost.Convert main deployment interface with algorithms. For example, <programlisting>    boost::array&lt;char const*, 3&gt; strs = {{ " 5", "0XF", "not an int" }};
    std::vector&lt;int&gt;             ints;
    <classname alt="boost::cnv::basic_stringstream">boost::cnv::cstringstream</classname>     cnv;

    cnv(std::hex)(std::skipws);

    std::transform(
        strings.begin(),
        strings.end(),
        std::back_inserter(integers),
        boost::convert&lt;int&gt;(cnv).value_or(INT_MAX));
</programlisting> </para></description></function></namespace></header><header name="boost/convert/lexical_cast.hpp"><namespace name="boost"><namespace name="cnv"><struct name="lexical_cast"><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; TypeOut &gt; &amp;</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/convert/parameters.hpp"><namespace name="boost"><namespace name="cnv"><struct name="base"><enum name="type"><enumvalue name="dec"><default>10</default></enumvalue><enumvalue name="hex"><default>16</default></enumvalue><enumvalue name="oct"><default>8</default></enumvalue></enum></struct><struct name="notation"><enum name="type"><enumvalue name="fixed"/><enumvalue name="scientific"/></enum></struct><namespace name="parameter"><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype><classname>base</classname></paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>locale</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>precision</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype>uppercase</paramtype></parameter></function><function name="BOOST_PARAMETER_KEYWORD"><type/><parameter name=""><paramtype>type</paramtype></parameter><parameter name=""><paramtype><classname>notation</classname></paramtype></parameter></function></namespace></namespace></namespace></header><header name="boost/convert/printf.hpp"><namespace name="boost"><namespace name="cnv"><struct name="printf"><typedef name="this_type"><type><classname>boost::cnv::printf</classname></type></typedef><typedef name="base_type"><type><emphasis>unspecified</emphasis></type></typedef><data-member name="CONVERT_FUNC_SET_BASE"><type/></data-member><data-member name="CONVERT_FUNC_SET_PRECISION"><type/></data-member><data-member name="CONVERT_FUNC_SET_UPPERCASE"><type/></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>boost::disable_if&lt; cnv::is_any_string&lt; TypeIn &gt;, void &gt;::type</type><template>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; std::string &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>boost::disable_if&lt; cnv::is_any_string&lt; TypeOut &gt;, void &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
        </template><parameter name="value_in"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; TypeOut &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>boost::disable_if&lt; cnv::is_any_string&lt; TypeOut &gt;, void &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
        </template><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; TypeOut &gt; &amp;</paramtype></parameter></method></method-group><method-group name="private member functions"><method name="pos" cv="const"><type>int</type><template>
          <template-type-parameter name="Type"/>
        </template></method><method name="format" cv="const"><type>char const *</type><parameter name="pos"><paramtype>int</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/convert/spirit.hpp"><namespace name="boost"><namespace name="cnv"><struct name="spirit"><method-group name="public member functions"><method name="parse_" cv="const"><type>void</type><template>
          <template-type-parameter name="Iterator"/>
        </template><parameter name="beg"><paramtype>Iterator</paramtype></parameter><parameter name="end"><paramtype>Iterator</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="str"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="result"><paramtype>boost::optional&lt; int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="str"><paramtype>char const *</paramtype></parameter><parameter name="result"><paramtype>boost::optional&lt; int &gt; &amp;</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/convert/sstream.hpp"><namespace name="boost"><namespace name="cnv"><struct name="basic_stringstream"><template>
      <template-type-parameter name="Char"/>
    </template><typedef name="char_type"><type>Char</type></typedef><typedef name="this_type"><type><classname>boost::cnv::basic_stringstream</classname>&lt; char_type &gt;</type></typedef><typedef name="stream_type"><type>std::basic_stringstream&lt; char_type &gt;</type></typedef><typedef name="istream_type"><type>std::basic_istream&lt; char_type &gt;</type></typedef><typedef name="buffer_type"><type>std::basic_streambuf&lt; char_type &gt;</type></typedef><typedef name="parser_type"><type><emphasis>unspecified</emphasis></type></typedef><typedef name="string_type"><type>std::basic_string&lt; char_type &gt;</type></typedef><typedef name="manipulator_type"><type>std::ios_base &amp;(*</type></typedef><method-group name="public member functions"><method name="operator()" cv="const"><type>boost::enable_if_c&lt;!cnv::is_any_string&lt; TypeIn &gt;::value, void &gt;::type</type><template>
          <template-type-parameter name="TypeIn"/>
        </template><parameter name="value_in"><paramtype>TypeIn const &amp;</paramtype></parameter><parameter name="string_out"><paramtype>boost::optional&lt; string_type &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>boost::enable_if_c&lt; cnv::is_any_string&lt; StringIn &gt;::value &amp;&amp;!cnv::is_any_string&lt; TypeOut &gt;::value, void &gt;::type</type><template>
          <template-type-parameter name="TypeOut"/>
          <template-type-parameter name="StringIn"/>
        </template><parameter name="string_in"><paramtype>StringIn const &amp;</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; TypeOut &gt; &amp;</paramtype></parameter></method><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><parameter name="locale"><paramtype>std::locale const &amp;</paramtype></parameter></method><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><parameter name="m"><paramtype>manipulator_type</paramtype></parameter></method><method name="operator()" cv=""><type><classname>this_type</classname> &amp;</type><template>
          <template-type-parameter name="Manipulator"/>
        </template><parameter name="m"><paramtype>Manipulator</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype>locale</paramtype></parameter><parameter name=""><paramtype>std::locale</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype>precision</paramtype></parameter><parameter name=""><paramtype>int</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype>uppercase</paramtype></parameter><parameter name=""><paramtype>bool</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype><classname>base</classname></paramtype></parameter><parameter name=""><paramtype>boost::cnv::base::type</paramtype></parameter></method><method name="CONVERTER_PARAM_FUNC" cv=""><type/><parameter name=""><paramtype><classname>notation</classname></paramtype></parameter><parameter name=""><paramtype>boost::cnv::notation::type</paramtype></parameter></method></method-group><constructor/></struct><typedef name="cstringstream"><type><classname>boost::cnv::basic_stringstream</classname>&lt; char &gt;</type></typedef><typedef name="wstringstream"><type><classname>boost::cnv::basic_stringstream</classname>&lt; wchar_t &gt;</type></typedef></namespace></namespace></header><header name="boost/convert/strtol.hpp"><namespace name="boost"><namespace name="cnv"><struct name="strtol"><typedef name="this_type"><type><classname>boost::cnv::strtol</classname></type></typedef><typedef name="base_type"><type><emphasis>unspecified</emphasis></type></typedef><data-member name="CONVERT_FUNC_SET_BASE"><type/></data-member><data-member name="CONVERT_FUNC_SET_PRECISION"><type/></data-member><data-member name="CONVERT_FUNC_SET_UPPERCASE"><type/></data-member><method-group name="public member functions"><method name="operator()" cv="const"><type>void</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype>boost::optional&lt; int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype>boost::optional&lt; long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype>boost::optional&lt; unsigned long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="v"><paramtype>std::string const &amp;</paramtype></parameter><parameter name="r"><paramtype>boost::optional&lt; double &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; double &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="value_in"><paramtype>char const *</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; unsigned long int &gt; &amp;</paramtype></parameter></method><method name="operator()" cv="const"><type>void</type><parameter name="value_in"><paramtype>int</paramtype></parameter><parameter name="result_out"><paramtype>boost::optional&lt; std::string &gt; &amp;</paramtype></parameter></method></method-group><method-group name="public static functions"><method name="ltostr" cv=""><type>static std::string</type><parameter name="num"><paramtype>long int</paramtype></parameter><parameter name="base"><paramtype>unsigned int</paramtype></parameter></method></method-group></struct></namespace></namespace></header><header name="boost/make_default.hpp"><namespace name="boost"><function name="make_default"><type>T</type><template>
          <template-type-parameter name="T"/>
        </template></function></namespace></header></library-reference>
