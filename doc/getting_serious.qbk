[section Better Error Detection]

[import ../example/getting_serious.cpp]

[getting_serious_example1]

The code above is straightforward and self-explanatory but, unfortunately, strictly speaking, is not entirely deterministic as -1 might be the result of a conversion failure or the successful conversion of the "-1" string. Still, in reality "spare" values are quite often available outside the valid\/sensible range to indicate conversion failures. If so, such deployment might be adequate without introducing that mentioned behavioral non-determinism. Alternatively, it might be not that uncommon to ignore conversion failures altogether and to simply proceed with the supplied fallback value.

Applications outside these mentioned categories still require a conversion failure reliably detected and processed accordingly. The `boost::lexical_cast`'s answer is to throw on failure and ['Boost.Convert] supports that behavior as well: 

[getting_serious_example2]

However, to cater for a wider range of program-flow variations, ['Boost.Convert] adds the flexibility of 

* delaying the moment when the conversion-failure exception is actually thrown or 
* avoiding the exception altogether. 

[getting_serious_example3]

Here `boost::optional` steps forward as the actual type returned by `boost::convert()` which until now we avoided by immediately calling its value-accessor methods:

 int i1 = boost::convert<int>(str1, cnv).value();
 int i2 = boost::convert<int>(str2, cnv).value_or(fallback_value);

Here `boost::convert` behavior (similar to `boost::lexical_cast`) reflect the fact that a conversion request is only a ['request] which may succeed but may also fail. However, from the user perspective `boost::lexical_cast` processes failure in a somewhat one-dimensional non-negotiable manner. `boost::convert` takes a softer approach and leaves the decision to the user. On the library level throwing an exception to indicate a conversion failure might be the only available response. On the application level though, in my personal experience, the choice has overwhelmingly been to avoid exceptions altogether with program flows similar to:

[getting_serious_example4]

Or even better (see the next section for details):

[getting_serious_example5]
[getting_serious_example6]

[endsect]


