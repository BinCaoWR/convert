[section Getting Started]

[note Given the ubiquity of `boost::lexical_cast` and the familiarity of the programming community with it, here and further in the documentation `boost::lexical_cast` is often mentioned as a reference.]

In its simplest form the ['Boost.Convert] functionality might be deployed as follows:

[import ../example/getting_started.cpp]

[getting_started_headers1]
[getting_started_example1]

The above calls can be interpreted as "['convert a string to int]" for `i1` and `i2` and "['convert a string to int and return -1 if the conversion fails]" for `i3`. 

The `i1` and `i2` deployments look sufficiently close and, in fact, are identical behaviorally. Namely, if the requested conversion fails, an exception is thrown. The user request -- "['convert a string to int]" -- lacks the description of the failure use-case. Consequently, `boost::lexical_cast` and `boost::convert` treat that use-case as "exceptional".

"['Convert a string to int and return -1 if the conversion fails]" is complete and processed "as ordered" with the provided fallback value returned if the requested conversion fails. 

The described (very basic) interface might be sufficient for a variety of conversion deployments. For example:

[getting_started_example2]

Or even shorter, if we do not care logging:

[getting_started_example3]

So far the deployment of `boost::convert()` seems more compact and natural (your mileage may vary) and might be potentially more efficient compared to `boost::lexical_cast` deployment which achieves similar (excluding formatting) results with:

 int num_threads = default_num_threads;

 try
 {
     num_threads = boost::lexical_cast<int>(str);
 }
 catch (...)
 {
     log("bad num_threads");
 }

By design this is `boost::lexical_cast`'s only behavior. Fairly straightforward and comprehensible. Unfortunately, it makes quite a few legitimate process\/program flows difficult and awkward to implement. ['Boost.Convert] adds new functionality, flexibility and convenience.

[endsect]
