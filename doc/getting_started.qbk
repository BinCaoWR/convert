[section Getting Started]

[note Given the ubiquity of `boost::lexical_cast` and the familiarity of the programming community with it, here and further in the documentation `boost::lexical_cast` is often mentioned as a reference.]

[import ../example/getting_started.cpp]

[h2 Basic Deployment]

`boost::convert` basic deployment is not that different from `boost::lexical_cast` and, in fact, `boost::lexical_cast` functionality is easily deployed through `boost::convert` interface (with no performance overhead when compiled optimized):

[getting_started_headers1]
[getting_started_example1]

[h2 Flexibility and Adaptability to Change]

These qualities become important later in development or in the maintenance phase when, say, later the code above is flagged as too slow. Then the performance could be improved by replacing the original converter:

[getting_started_headers2]
[getting_started_example2]

If, instead, the requirements change to accept more user-input formats or to write in a certain format, then, again, that could be achieved with another converter:

[getting_started_headers3]
[getting_started_example3]

[h2 Basic Error Processing]

[getting_started_example4]

The above calls can be interpreted as 

* "['convert a string to int]" for `i1` and `i2` and 
* "['convert a string to int and return -1 if the conversion fails]" for `i3`. 

The `i1` and `i2` deployments look sufficiently close and, in fact, are identical behaviorally. Namely, if the requested conversion fails, an exception is thrown. The user request -- "['convert a string to int]" -- lacks the description of the failure use-case. Consequently, `boost::lexical_cast` and `boost::convert` treat that use-case as "exceptional". The description for `i3` is complete and processed "as ordered" with the provided fallback value returned if the requested conversion fails. 

That fairly straightforward error detection might be sufficient for a variety of conversion deployments. For example:

[getting_started_example5]

Or even shorter, if we do not care logging:

[getting_started_example6]

So far the deployment of `boost::convert` seems more flexible, more compact and natural (your mileage may vary) and potentially more efficient compared to "raw" `boost::lexical_cast` deployment which achieves similar (excluding formatting) results with:

 int num_threads = default_num_threads;

 try
 {
     num_threads = boost::lexical_cast<int>(str);
 }
 catch (...)
 {
     log("bad num_threads");
 }

By design this is `boost::lexical_cast`'s only behavior. Straightforward and comprehensible. Unfortunately, it makes quite a few legitimate process\/program flows difficult and awkward to implement. ['Boost.Convert] offers new functionality, flexibility and convenience.

[endsect]
