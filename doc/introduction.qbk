[section Introduction]

['Boost.Convert] builds on the `boost::lexical_cast` experience and takes those conversion\/transformation-related ideas further 

* to be applicable to a wider range of conversion-related deployment scenarios, 
* to provide a more flexible, configurable and extensible type-conversion framework, 
* to provide generic consistent behavior,
* to ['unify and to uniformly deploy] various conversion facilities ['through one consistent interface].

['Boost.Convert] consists of two components:

* the `boost::convert()` user interface;
* an extendible collection of pluggable converters.

`boost::convert()` is responsible for ['uniform deployment] and ['consistent behavior]. It implements new and familiar conversion\/transformation-related behavior such as:

* flexible throwing, delayed-throwing and non-throwing failed-conversion behavior;
* support for the fallback value to be returned when conversion\/transformation fails;
* two types of the conversion-failure check - quick/simple and generic;
* means to deploy types that do no meet the ['Default Constructibility] requirement;
* support for standard algorithms.

The collection of pluggable converters is independent of the ['Boost.Convert] API facade and is designed to be extended over time. With the current proposal a few proof-of-the-concept string-to-type (and type-to-string) converters are supplied:

* `boost::lexical_cast`-based, 
* `printf/scanf`-based,
* `strtol/ltostr`-based, 
* `std::stringstream`-based.

The first three converters are meant to demonstrate how existing and independent conversion facilities might be incorporated in to the ['Boost.Convert] framework. Although the `printf/scanf`-based and `strtol`-based converters already provide some basic formatting support. 

The `std::stringstream`-based converter draws on the standard `std::streams` functionality and provides:

* string-to-type and type-to-string conversions;
* formatting support (precision, base, upper/lower-case, scientific, etc.);
* support for different locales;
* `char` and `wchar_t` support.

[import ../example/algorithms.cpp]

[algorithm_simple]

An interesting (and yet to be explored) property is that ['Boost.Convert] is not limited to string-to-type and type-to-string conversions. `boost::convert()` is type-agnostic and the plugged-in converter ultimately dictates what types and conversions are supported. Consequently, a wide range of conversion\/transformation-related tasks can be addressed and ['deployed uniformly] by plugging-in special-purpose converters.

[endsect]
