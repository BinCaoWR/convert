[section boost::lexical_cast-Based Converter]

[import ../example/lexical_cast.cpp]

The purpose of the converter is 

* to make use of the `boost::lexical_cast` functionality and performance that many people have become accustomed to and comfortable with;
* to demonstrate how existing independent conversion\/transformation-related facilities might be incorporated in to the ['Boost.Convert] framework.

The converter can easily replace `boost::lexical_cast`, adds flexibility and convenience:

[lexical_cast_headers1]
[lexical_cast_example1]

See the [classref boost::cnv::lexical_cast implementation] for details.

In order for a user-defined type to be integrated into the `boost::lexical_cast` framework (at least until 1.47; see [@http://www.boost.org/doc/libs/1_47_0/libs/conversion/lexical_cast.htm `boost::lexical_cast` 1.47 documentation]):

* ['TypeOut] needs to be ['Copy Constructible];
* ['TypeOut] needs to be ['Default Constructible];
* ['TypeOut] needs to be ['Input Streamable];
* ['TypeIn] needs to be ['Output Streamable].

The first two requirements are imposed by the `boost::lexical_cast` design and implementation and the last two requirements by the underlying `std::stringstream` engine.

[endsect]

