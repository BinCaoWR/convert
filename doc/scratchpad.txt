[section Component Design]

When looked at the ['boost::convert()] in isolation the facade API does very little on its own. Still, it is an important artefact of the component design. The component (software and industrial) design is essential for any system of reasonable size and longevity.

Its distinctive quality is that it is driven by interfaces, "connectors". Those allow varying components to be plugged-in together and to communicate in order to work in cooperation.

In the component design known behavior and familiar/compatible interfaces are important and are the characteristics that allow many different pieces/components to work in cooperation and to form a system. 

Statistically any serious software system (of reasonable size and longevity) spends eighty percent (meaning it is really important) of its total time in the maintenance phase with software entropy or complexity increasing over time. The component design is the only 

It allows chanto plug an electrical device into an electric wall socket without even thinking about. Ttrying it in a different country might be a very frustrating and often impossible excersice. 




It does not take long to realize that `boost::convert()` by itself does very little. The respective converter -- the ['worker] component -- provides the actual functionality and even a somewhat useable interface that can be deployed directly (if one is determined to do so). I readily concede that on the one-man-project level the existence of `boost::convert()` can be hardly justified. 

`boost::convert()` is the ['manager] component and the benefits of deploying varying conversion facilities via one consistent interface become clearer on a larger industrial level of software development.

The purpose of `boost::convert()` is to formalize, advertize and enforce a ['contract] between the user (service consumer) and the developer (service provider).

That ultimately minimizes dependency of the application-domain (user) code on any particular infrastructure (conversion) API. New converters can be introduced and deployed later in the development cycle, with minimal or no impact on the existing code base as long as those converters conform to that specified contract. 


Based on that contract the consumer knows what to expect
and the provider knows what to provide *without consumer-provider
interaction*. In practical terms it is that every time I browse somebody
else's code and see the interface, I immediately know what it does without
reading the docs, learning new api, etc. In real life, when one is reading
(trying to fix) somebody else's code the "reading the docs, learning new
api" seems like a considerable diversion and often does not happen. So, the
understanding of the code quickly turns into a guessing game. So,
productivity is no more.

More
so, in my view there is no even Convert "library". :-) I see my proposal as
a conversion/transformation *framework*. The difference between a library
and a framework (in my view and in this particular case, anyway) is that the
latter is merely the guidelines how to be able to develop code *later* that
is to be deployed in and without disrupting the old/existing code. That's
what convert::from API facade does. 

 That allows the user to write his domain-specific code
*now* and to plug some converter later (when it becomes available) or to
replace one converter with another (if/when the requirements change) without
major disruption of the existing code-base. 

As you correctly pointed out one-particular-converter functionality can be
called directly rather than via "meaningless" convert::from. 

The existence of Convert API facade is more for the purposes of *managing* a large
development which includes *simultaneously* writing components which are
meant to interact or rely on each other; adjusting to requirement changes
without major existing code disruption (that includes major re-writes, major
re-testing, etc.). 

Yes, I understand your reasoning. I personally find the pluggability quality
to be quite important. 

First, from the first
submission review it was clear to me that not everyone was interested in the
std::sstream-based functionality and prepared to accept relative slowness of
std::sstream. The pluggability addresses that issue with minimal effort and
makes the library useful for much wider programming community. 

Secondly, the separation of the API/facade from the actual converter -- the
pluggability -- allows to write and deploy new/better/domain-specific
converters easily -- as long as those converters conform to the API-imposed
contract. The difference in "plugging a new converter" vs "replacing an
existing directly-used converter with a new converter" is considerable in a
large-scale development as the former only replaces a pluggable component
(leaving the "plumbing" intact) and the latter may create a lot of ripples
in the related code. An every-day example might be unplugging and replacing
an electrical device. Clearly, with no pluggability replacing such a device
(directly connected to your house wiring) might be quite a hassle. Yes, on
one-person-writing-new-code level that pluggability looks like a hassle. My
argument is that on the large-code-base, maintenance, changed-requirements
phase pluggability is the only sane way to manage that change.

[endsect]

