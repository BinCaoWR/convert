[/
  Copyright (c) Vladimir Batov 2009-2014
  Distributed under the Boost Software License, Version 1.0.
  See copy at http://www.boost.org/LICENSE_1_0.txt.
]

[import ../test/strtol_converter.cpp]

[section boost::cnv::strtol Converter]

The converter started as a deployment example (with the `std::strtol` family of functions as its conversion engine) and a part of the performance-test set. Surprisingly, the converter showed fairly decent all-around performance (see [link boost_convert.performance.converters_compared Converters Compared]) and, consequently, has been rewritten and extended to provide additional conversion support and formatting. At the moment it seems to be a good choice with moderate formatting facilities and adequate performance.

It should be noted though that the converter is nowhere as mature as `boost::cnv::lexical_cast` or `boost::cnv::stream` and, therefore, bugs are to be expected.

[section Basic Deployment]
[strtol_basic_deployment_header]
[strtol_basic_deployment]
[endsect]

[section Formatting Support]

[section Numeric Base]
[strtol_numeric_base_header]
[strtol_numeric_base]
[wide_strtol_numeric_base]
[endsect]

[section Field Width, Fill Character and Adjustment]
[strtol_width]
[endsect]

[section Leading Whitespace Characters]
[strtol_skipws]
[wide_strtol_skipws]
[endsect]

[section Floating-Point Precision]
[strtol_precision]
[endsect]
[endsect]

[section Supported String Types]

[section Wide String]
[wide_strtol_numeric_base]
[wide_strtol_skipws]
[endsect]

[section Custom String Types]
[my_string_declaration]
[strtol_user_string]
[endsect]

[endsect]

[section Integration of User-Defined Types]

Support for user types has been implemented similarly to `boost::lexical_cast` and `boost::cnv::cstream` but without the `std::stream`-related overhead. Namely, new types can be plugged in to the framework via:

 void operator>>(TypeIn const&, boost::optional<TypeOut>&);

For example, the previously-mentioned `change` class can be deployed with `boost::cnv::strol` after having the following defined:

[change_convert_operators]

That allows handling conversions of user-defined types with `boost::cnv::strtol` converter:

[strtol_user_type]

[endsect]
[endsect]

