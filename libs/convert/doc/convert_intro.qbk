[section:convert_intro Introduction]

/Boost.Convert/ builds on the /boost::lexical_cast/ experience and then takes those conversion-related ideas further to provide more flexible and extendible conversion framework, richer conversion-related configurability to better suit today's applications and programming needs. The /Boost.Convert/ framework is split into two components

* the /Boost.Convert/ API facade to provide simple, minimal and uniform interface and
* the library of purpose-built pluggable converters to provide type conversions depending on the need.

The API facade implements familiar and new conversion-related behavior such as:

* configurable throwing and non-throwing failed-conversion behavior;
* support for the default\/fallback value to be returned when conversion fails;
* two types of the conversion-failure check - basic/simple and better\/safe;
* no DefaultConstructibility requirement for the Target\/Destination type;
* support for standard algorithms.

The library of pluggable converters is to be extended over time. Only one proof-of-the-concept converter is supplied with the current proposal -- a string-to-type std::stringstream-based converter. It offers the following functionality:

* conversion formatting support based on the standard /std::streams/ and /std::stream/-based manipulators (like /std::hex/, /std::scientific/, etc.);
* support for different locales;
* support for /boost::range/-compliant /char/ and /wchar_t/-based containers.

The provided converter is based on std::stringstream and it is far from being a speed devil. However, it might be quite useful and sufficient for applications with moderate performance-related requirements but requiring considerable conversion-related formatting functionality such as locale, oct/dec/hex, etc.

Otherwise, the framework allows a custom-built converter (say, built on /Boost.Spirit/) to be plugged in and deployed instead.

/Boost.Convert/ is not limited to string-to-type and type-to-string conversions. In fact, it is not 

making extensive use of configuration or MS-Windows-Registry-style files or having to process/prepare considerable amounts of data in, say, XML, etc. More so, it is easily extendible to accommodate, specialize and uniformly deploy new user-defined type-to-type conversions.

[endsect]
