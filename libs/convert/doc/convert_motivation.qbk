[section:convert_motivation Motivation]

My project used textual configuration files extensively and was processing and preparing considerable amounts of data in XML for interprocess communications. Consequently, I had a need for a library that would provide a ['uniform and extendible] interface to convert various data between their internal binary representations and external (predominantly textual, string-based) representations. 

The ['boost::lexical_cast] library (with its orthogonal design and extendible deployment) looked very promising and was by far the preferred candidate compared to others (such as C functions, the ['std::stringstream] API, etc., see __ref_2__ for the discussion of alternatives). 

Unfortunately, 

* many deployed user types simply did not meet ['boost::lexical_cast] requirements (namely, ['Default Constructibility]); 
* a failure to read and to convert a user-provided configuration parameter was not that rare and exceptional to justify the hassle and the overhead of exception processing; 
* additional flexibility (['if] and ['how] to handle) conversion failures was needed;
* additional conversion formatting and locale support were needed, etc. 

The original hope was to see ['boost::lexical_cast] extended to be applicable to a wider range of use-cases. However, after discussions with Kevlin Henney (the original ['boost::lexical_cast] author) and in the Boost Developers forum it was collectively decided that the requested extensions were not compatible with the original design and the idea of what ['boost::lexical_cast] embodied and, therefore, a new component with richer interface and functionality was needed. That decision resulted in the development and the subsequent submission of the ['Boost.Convert] library described in this document.

[endsect]
